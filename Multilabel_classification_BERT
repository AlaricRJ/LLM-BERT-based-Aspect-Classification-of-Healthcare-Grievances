{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "A3fQeIpO-FBu"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import shutil\n",
        "import sys\n",
        "import tqdm.notebook as tq\n",
        "from collections import defaultdict\n",
        "\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "\n",
        "device = torch.device('cuda:0') if torch.cuda.is_available() else torch.device('cpu')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "tJbr23I-cgUA"
      },
      "outputs": [],
      "source": [
        "df = pd.read_csv(\"/mnt/Data/sarmistha/Sarmistha/Complaint_mining/overall Dataset - Copy of 2nd Phase Annotation.csv\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 642
        },
        "id": "kuzpWCvkfArb",
        "outputId": "daaf5903-36b2-4165-f23d-2658dc145114"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Full Complaint</th>\n",
              "      <th>Complaint/Non Complaint</th>\n",
              "      <th>Service</th>\n",
              "      <th>Negligence</th>\n",
              "      <th>Behaviour</th>\n",
              "      <th>Cleanliness</th>\n",
              "      <th>Pharmacy</th>\n",
              "      <th>Unprofessionalism</th>\n",
              "      <th>Inefficiency</th>\n",
              "      <th>Unavailibility</th>\n",
              "      <th>Billing</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Very poor hospital no care kabhi mat jana if u...</td>\n",
              "      <td>Complaint</td>\n",
              "      <td>Complaint</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Complaint</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Eyeq hospital Haldwani, uttarakhand, my mother...</td>\n",
              "      <td>Complaint</td>\n",
              "      <td>Complaint</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Complaint</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>I had my retina appointment here with Dr. M M ...</td>\n",
              "      <td>Complaint</td>\n",
              "      <td>Complaint</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Complaint</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Third class experience. At the age of 73 my mo...</td>\n",
              "      <td>Complaint</td>\n",
              "      <td>Complaint</td>\n",
              "      <td>Complaint</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Complaint</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Please don’t go for lasik at eye q because I h...</td>\n",
              "      <td>Complaint</td>\n",
              "      <td>Complaint</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                      Full Complaint Complaint/Non Complaint  \\\n",
              "0  Very poor hospital no care kabhi mat jana if u...               Complaint   \n",
              "1  Eyeq hospital Haldwani, uttarakhand, my mother...               Complaint   \n",
              "2  I had my retina appointment here with Dr. M M ...               Complaint   \n",
              "3  Third class experience. At the age of 73 my mo...               Complaint   \n",
              "4  Please don’t go for lasik at eye q because I h...               Complaint   \n",
              "\n",
              "     Service Negligence Behaviour Cleanliness Pharmacy Unprofessionalism  \\\n",
              "0  Complaint        NaN       NaN         NaN      NaN               NaN   \n",
              "1  Complaint        NaN       NaN         NaN      NaN         Complaint   \n",
              "2  Complaint        NaN       NaN         NaN      NaN         Complaint   \n",
              "3  Complaint  Complaint       NaN         NaN      NaN               NaN   \n",
              "4  Complaint        NaN       NaN         NaN      NaN               NaN   \n",
              "\n",
              "  Inefficiency Unavailibility Billing  \n",
              "0    Complaint            NaN     NaN  \n",
              "1          NaN            NaN     NaN  \n",
              "2          NaN            NaN     NaN  \n",
              "3    Complaint            NaN     NaN  \n",
              "4          NaN            NaN     NaN  "
            ]
          },
          "execution_count": 3,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AF0QX04td5mm",
        "outputId": "6d72a825-e11c-4b4d-96a7-7b3cd3f228ce"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(5415, 11)"
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "n1EgRJawfBnr"
      },
      "outputs": [],
      "source": [
        "for j in range(1,len(df.iloc[0])):\n",
        "  for i in range(len(df)):\n",
        "    if df.iloc[i,j] == \"Complaint\":\n",
        "      df.iloc[i,j] = 1\n",
        "    elif df.iloc[i,j] == \"Non Complaint\":\n",
        "      df.iloc[i,j] = 2\n",
        "    else:\n",
        "      df.iloc[i,j] = 0"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "axxyHrl6igA4"
      },
      "outputs": [],
      "source": [
        "df.drop(columns=[ \"Complaint/Non Complaint\"], axis=1, inplace=True)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "LL8VP__2jhU5"
      },
      "outputs": [],
      "source": [
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "# split into train and test\n",
        "df_train, df_test = train_test_split(df, random_state=77, test_size=0.30, shuffle=True)\n",
        "# split test into test and validation datasets\n",
        "df_test, df_valid = train_test_split(df_test, random_state=88, test_size=0.50, shuffle=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "COqMpb8nj_CM",
        "outputId": "e136c676-a40a-4cb8-fd88-8a6f3eb8ac63"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Train: (3790, 10), Test: (812, 10), Valid: (813, 10)\n"
          ]
        }
      ],
      "source": [
        "print(f\"Train: {df_train.shape}, Test: {df_test.shape}, Valid: {df_valid.shape}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "0fwwOhO2kNUN"
      },
      "outputs": [],
      "source": [
        "\n",
        "MAX_LEN = 512\n",
        "TRAIN_BATCH_SIZE = 16\n",
        "VALID_BATCH_SIZE = 16\n",
        "TEST_BATCH_SIZE = 16\n",
        "EPOCHS = 5\n",
        "LEARNING_RATE = 1e-05\n",
        "THRESHOLD = 0.5 # threshold for the sigmoid"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "VkwHXWillLeK"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/mnt/Data/sarmistha/Sarmistha/myenv/lib/python3.10/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
            "  from .autonotebook import tqdm as notebook_tqdm\n"
          ]
        }
      ],
      "source": [
        "from transformers import BertTokenizer, BertModel\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 654
        },
        "id": "BN73PlQZlNM9",
        "outputId": "1928cf91-c4f6-4b4e-97f2-3891bf237804"
      },
      "outputs": [],
      "source": [
        "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "kss5MZfflOw9"
      },
      "outputs": [],
      "source": [
        "# Test the tokenizer\n",
        "test_text = \"We are testing BERT tokenizer.\"\n",
        "# generate encodings\n",
        "encodings = tokenizer.encode_plus(test_text,\n",
        "                                  add_special_tokens = True,\n",
        "                                  max_length = 50,\n",
        "                                  truncation = True,\n",
        "                                  padding = \"max_length\",\n",
        "                                  return_attention_mask = True,\n",
        "                                  return_tensors = \"pt\")\n",
        "# we get a dictionary with three keys (see: https://huggingface.co/transformers/glossary.html)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "n22UnXv7lVNs"
      },
      "outputs": [],
      "source": [
        "class CustomDataset(torch.utils.data.Dataset):\n",
        "    def __init__(self, df, tokenizer, max_len, target_list):\n",
        "        self.tokenizer = tokenizer\n",
        "        self.df = df\n",
        "        self.title = list(df['Full Complaint'])\n",
        "        self.targets = self.df[target_list].values\n",
        "        self.max_len = max_len\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.title)\n",
        "\n",
        "    def __getitem__(self, index):\n",
        "      title = str(self.title[index])\n",
        "      title = \" \".join(title.split())\n",
        "      inputs = self.tokenizer.encode_plus(\n",
        "          title,\n",
        "          None,\n",
        "          add_special_tokens=True,\n",
        "          max_length=self.max_len,\n",
        "          padding='max_length',\n",
        "          return_token_type_ids=True,\n",
        "          truncation=True,\n",
        "          return_attention_mask=True,\n",
        "          return_tensors='pt'\n",
        "      )\n",
        "\n",
        "      # Ensure targets are numeric and handle missing values\n",
        "      targets = self.targets[index].astype(np.float32)  # Convert to float32 if not already\n",
        "\n",
        "      return {\n",
        "          'input_ids': inputs['input_ids'].flatten(),\n",
        "          'attention_mask': inputs['attention_mask'].flatten(),\n",
        "          'token_type_ids': inputs[\"token_type_ids\"].flatten(),\n",
        "          'targets': torch.FloatTensor(targets),\n",
        "          'title': title\n",
        "      }\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "9sR7CJKxlg7u"
      },
      "outputs": [],
      "source": [
        "target_list = list(df.columns)\n",
        "target_list = target_list[1:]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "byW42KYsmCg3"
      },
      "outputs": [],
      "source": [
        "train_dataset = CustomDataset(df_train, tokenizer, MAX_LEN, target_list)\n",
        "valid_dataset = CustomDataset(df_valid, tokenizer, MAX_LEN, target_list)\n",
        "test_dataset = CustomDataset(df_test, tokenizer, MAX_LEN, target_list)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "fgLTRgHcobzb"
      },
      "outputs": [],
      "source": [
        "# Data loaders\n",
        "train_data_loader = torch.utils.data.DataLoader(train_dataset,\n",
        "    batch_size=TRAIN_BATCH_SIZE,\n",
        "    shuffle=True,\n",
        "    num_workers=0\n",
        ")\n",
        "\n",
        "val_data_loader = torch.utils.data.DataLoader(valid_dataset,\n",
        "    batch_size=VALID_BATCH_SIZE,\n",
        "    shuffle=False,\n",
        "    num_workers=0\n",
        ")\n",
        "\n",
        "test_data_loader = torch.utils.data.DataLoader(test_dataset,\n",
        "    batch_size=TEST_BATCH_SIZE,\n",
        "    shuffle=False,\n",
        "    num_workers=0\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "tensor([[0.6213],\n",
              "        [0.6323]], grad_fn=<AddmmBackward0>)"
            ]
          },
          "execution_count": 19,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ele = torch.rand(2,3)\n",
        "layer_1 = torch.nn.Linear(3,1)\n",
        "layer_1(ele)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "id": "MGrDBR7lokSI"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "BERTClass(\n",
              "  (bert_model): BertModel(\n",
              "    (embeddings): BertEmbeddings(\n",
              "      (word_embeddings): Embedding(30522, 768, padding_idx=0)\n",
              "      (position_embeddings): Embedding(512, 768)\n",
              "      (token_type_embeddings): Embedding(2, 768)\n",
              "      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "      (dropout): Dropout(p=0.1, inplace=False)\n",
              "    )\n",
              "    (encoder): BertEncoder(\n",
              "      (layer): ModuleList(\n",
              "        (0-11): 12 x BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "            (intermediate_act_fn): GELUActivation()\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "      )\n",
              "    )\n",
              "    (pooler): BertPooler(\n",
              "      (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "      (activation): Tanh()\n",
              "    )\n",
              "  )\n",
              "  (dropout): Dropout(p=0.3, inplace=False)\n",
              "  (linear): Linear(in_features=768, out_features=27, bias=True)\n",
              "  (act): Softmax(dim=-1)\n",
              ")"
            ]
          },
          "execution_count": 39,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "class BERTClass(torch.nn.Module):\n",
        "    def __init__(self):\n",
        "        super(BERTClass, self).__init__()\n",
        "        self.bert_model = BertModel.from_pretrained('bert-base-uncased', return_dict=True)\n",
        "        self.dropout = torch.nn.Dropout(0.3)\n",
        "        self.linear = torch.nn.Linear(768, 3*9)\n",
        "        self.act = torch.nn.Softmax(dim = -1)\n",
        "    def forward(self, input_ids, attn_mask, token_type_ids):\n",
        "        output = self.bert_model(\n",
        "            input_ids,\n",
        "            attention_mask=attn_mask,\n",
        "            token_type_ids=token_type_ids\n",
        "        )\n",
        "        output_dropout = self.dropout(output.pooler_output)\n",
        "        output = self.linear(output_dropout)\n",
        "        output = output.reshape(output.shape[0],9, 3)\n",
        "        return self.act(output)\n",
        "\n",
        "model = BERTClass()\n",
        "\n",
        "# # Freezing BERT layers: (tested, weaker convergence)\n",
        "# for param in model.bert_model.parameters():\n",
        "#     param.requires_grad = False\n",
        "\n",
        "model.to(device)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "id": "x1UQdPu1r4tP"
      },
      "outputs": [],
      "source": [
        "\n",
        "# BCEWithLogitsLoss combines a Sigmoid layer and the BCELoss in one single class.\n",
        "# This version is more numerically stable than using a plain Sigmoid followed\n",
        "# by a BCELoss as, by combining the operations into one layer,\n",
        "# we take advantage of the log-sum-exp trick for numerical stability.\n",
        "loss_fn = torch.nn.CrossEntropyLoss()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "id": "HIfD8jeWrGBL"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/mnt/Data/sarmistha/Sarmistha/myenv/lib/python3.10/site-packages/transformers/optimization.py:521: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "from transformers import AdamW\n",
        "\n",
        "# define the optimizer\n",
        "optimizer = AdamW(model.parameters(), lr = 1e-5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {
        "id": "u3HDoTxBo0Eg"
      },
      "outputs": [],
      "source": [
        "from tqdm.notebook import tqdm\n",
        "def train_model(training_loader, model, optimizer):\n",
        "\n",
        "    losses = []\n",
        "    correct_predictions = 0\n",
        "    num_samples = 0\n",
        "    # set model to training mode (activate droput, batch norm)\n",
        "    model.train()\n",
        "    # initialize the progress bar\n",
        "\n",
        "    for ind, data in enumerate(training_loader):\n",
        "        print(f\"\\r [{ind}/{len(training_loader)} completed]\",end = '  ')\n",
        "        ids = data['input_ids'].to(device, dtype = torch.long)\n",
        "        mask = data['attention_mask'].to(device, dtype = torch.long)\n",
        "        token_type_ids = data['token_type_ids'].to(device, dtype = torch.long)\n",
        "        targets = data['targets'].to(device, dtype = torch.long)\n",
        "\n",
        "        # forward\n",
        "        outputs = model(ids, mask, token_type_ids) # (batch,predict)=(32,8)\n",
        "        # display(outputs,targets)\n",
        "        loss = loss_fn(outputs.view(-1,3), targets.view(-1))\n",
        "        losses.append(loss.item())\n",
        "        # training accuracy, apply sigmoid, round (apply thresh 0.5)\n",
        "        outputs = torch.argmax(outputs,dim = -1).cpu().detach().numpy()\n",
        "        targets = targets.cpu().detach().numpy()\n",
        "        correct_predictions += np.sum(outputs==targets)\n",
        "        num_samples += targets.size   # total number of elements in the 2D array\n",
        "\n",
        "        # backward\n",
        "        optimizer.zero_grad()\n",
        "        loss.backward()\n",
        "        nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n",
        "        # grad descent step\n",
        "        optimizer.step()\n",
        "\n",
        "    # returning: trained model, model accuracy, mean loss\n",
        "    return model, float(correct_predictions)/num_samples, np.mean(losses)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "id": "imCUKWkxo_R2"
      },
      "outputs": [],
      "source": [
        "from sklearn.metrics import f1_score, precision_score, recall_score\n",
        "def eval_model(loader, model, loss_fn, device, target_list, threshold=0.5):\n",
        "    model.eval()\n",
        "    final_targets = []\n",
        "    final_outputs = []\n",
        "\n",
        "    with torch.no_grad():\n",
        "        total_loss = 0\n",
        "        for data in loader:\n",
        "            ids = data['input_ids'].to(device, dtype=torch.long)\n",
        "            mask = data['attention_mask'].to(device, dtype=torch.long)\n",
        "            token_type_ids = data['token_type_ids'].to(device, dtype=torch.long)\n",
        "            targets = data['targets'].to(device, dtype=torch.long)\n",
        "\n",
        "            outputs = model(ids, mask, token_type_ids)\n",
        "            loss = loss_fn(outputs.view(-1,3), targets.view(-1))\n",
        "            total_loss += loss.item()\n",
        "\n",
        "            outputs = torch.argmax(outputs,dim=-1).cpu().numpy()  # Binary conversion\n",
        "            final_outputs.append(outputs)\n",
        "            final_targets.append(targets.cpu().numpy())  # Ensure binary format\n",
        "\n",
        "        final_outputs = np.vstack(final_outputs)\n",
        "        final_targets = np.vstack(final_targets)\n",
        "        \n",
        "        # Calculate accuracy and F1 score for multilabel classification\n",
        "        accuracies = (final_outputs == final_targets).mean(axis=0)\n",
        "        precision = precision_score(final_outputs > 0.5,final_targets > 0.5,average= None)\n",
        "        recall = recall_score(final_outputs > 0.5,final_targets > 0.5,average= None)\n",
        "\n",
        "        f1_score_ = f1_score(final_outputs > 0.5,final_targets > 0.5,average= None)\n",
        "        \n",
        "    \n",
        "        \n",
        "\n",
        "            \n",
        "\n",
        "    mean_loss = total_loss / len(loader)\n",
        "    return precision, recall, f1_score_, accuracies, mean_loss, target_list\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "id": "LhCBN_0upOcK"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/5\n",
            " [236/237 completed]  "
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/mnt/Data/sarmistha/Sarmistha/myenv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/mnt/Data/sarmistha/Sarmistha/myenv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Train Loss: 0.8818, Validation Loss: 0.8021\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/mnt/Data/sarmistha/Sarmistha/myenv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/tmp/ipykernel_20362/74604800.py:25: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.\n",
            "  results_df = pd.concat([results_df, epoch_results], ignore_index=True)\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Epoch</th>\n",
              "      <th>Label</th>\n",
              "      <th>Train Accuracy</th>\n",
              "      <th>Test Accuracy</th>\n",
              "      <th>Train precision</th>\n",
              "      <th>Test precision</th>\n",
              "      <th>Train recall</th>\n",
              "      <th>Test recall</th>\n",
              "      <th>Train f1_score</th>\n",
              "      <th>Test f1_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Service</td>\n",
              "      <td>0.894195</td>\n",
              "      <td>0.883005</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.934301</td>\n",
              "      <td>0.918719</td>\n",
              "      <td>0.966035</td>\n",
              "      <td>0.957638</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Negligence</td>\n",
              "      <td>0.590501</td>\n",
              "      <td>0.614532</td>\n",
              "      <td>0.053158</td>\n",
              "      <td>0.061538</td>\n",
              "      <td>0.714286</td>\n",
              "      <td>0.714286</td>\n",
              "      <td>0.098952</td>\n",
              "      <td>0.113314</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>Behaviour</td>\n",
              "      <td>0.647757</td>\n",
              "      <td>0.608374</td>\n",
              "      <td>0.625514</td>\n",
              "      <td>0.580336</td>\n",
              "      <td>0.668132</td>\n",
              "      <td>0.628571</td>\n",
              "      <td>0.646121</td>\n",
              "      <td>0.603491</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>Cleanliness</td>\n",
              "      <td>0.875726</td>\n",
              "      <td>0.873153</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>Pharmacy</td>\n",
              "      <td>0.944591</td>\n",
              "      <td>0.928571</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1</td>\n",
              "      <td>Unprofessionalism</td>\n",
              "      <td>0.602111</td>\n",
              "      <td>0.561576</td>\n",
              "      <td>0.752011</td>\n",
              "      <td>0.717195</td>\n",
              "      <td>0.624361</td>\n",
              "      <td>0.582721</td>\n",
              "      <td>0.682267</td>\n",
              "      <td>0.643002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1</td>\n",
              "      <td>Inefficiency</td>\n",
              "      <td>0.795778</td>\n",
              "      <td>0.822660</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1</td>\n",
              "      <td>Unavailibility</td>\n",
              "      <td>0.878628</td>\n",
              "      <td>0.881773</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1</td>\n",
              "      <td>Billing</td>\n",
              "      <td>0.757784</td>\n",
              "      <td>0.735222</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.004630</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.009217</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  Epoch              Label  Train Accuracy  Test Accuracy  Train precision  \\\n",
              "0     1            Service        0.894195       0.883005         1.000000   \n",
              "1     1         Negligence        0.590501       0.614532         0.053158   \n",
              "2     1          Behaviour        0.647757       0.608374         0.625514   \n",
              "3     1        Cleanliness        0.875726       0.873153         0.000000   \n",
              "4     1           Pharmacy        0.944591       0.928571         0.000000   \n",
              "5     1  Unprofessionalism        0.602111       0.561576         0.752011   \n",
              "6     1       Inefficiency        0.795778       0.822660         0.000000   \n",
              "7     1     Unavailibility        0.878628       0.881773         0.000000   \n",
              "8     1            Billing        0.757784       0.735222         0.000000   \n",
              "\n",
              "   Test precision  Train recall  Test recall  Train f1_score  Test f1_score  \n",
              "0        1.000000      0.934301     0.918719        0.966035       0.957638  \n",
              "1        0.061538      0.714286     0.714286        0.098952       0.113314  \n",
              "2        0.580336      0.668132     0.628571        0.646121       0.603491  \n",
              "3        0.000000      0.000000     0.000000        0.000000       0.000000  \n",
              "4        0.000000      0.000000     0.000000        0.000000       0.000000  \n",
              "5        0.717195      0.624361     0.582721        0.682267       0.643002  \n",
              "6        0.000000      0.000000     0.000000        0.000000       0.000000  \n",
              "7        0.000000      0.000000     0.000000        0.000000       0.000000  \n",
              "8        0.004630      0.000000     1.000000        0.000000       0.009217  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "Train Accuracy     0.776341\n",
              "Test Accuracy      0.767652\n",
              "Train precision    0.270076\n",
              "Test precision     0.262633\n",
              "Train recall       0.326787\n",
              "Test recall        0.427144\n",
              "Train f1_score     0.265931\n",
              "Test f1_score      0.258518\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 2/5\n",
            " [236/237 completed]  "
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/mnt/Data/sarmistha/Sarmistha/myenv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/mnt/Data/sarmistha/Sarmistha/myenv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Train Loss: 0.7831, Validation Loss: 0.7731\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/mnt/Data/sarmistha/Sarmistha/myenv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Epoch</th>\n",
              "      <th>Label</th>\n",
              "      <th>Train Accuracy</th>\n",
              "      <th>Test Accuracy</th>\n",
              "      <th>Train precision</th>\n",
              "      <th>Test precision</th>\n",
              "      <th>Train recall</th>\n",
              "      <th>Test recall</th>\n",
              "      <th>Train f1_score</th>\n",
              "      <th>Test f1_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2</td>\n",
              "      <td>Service</td>\n",
              "      <td>0.900528</td>\n",
              "      <td>0.880542</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.934301</td>\n",
              "      <td>0.918719</td>\n",
              "      <td>0.966035</td>\n",
              "      <td>0.957638</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2</td>\n",
              "      <td>Negligence</td>\n",
              "      <td>0.607916</td>\n",
              "      <td>0.613300</td>\n",
              "      <td>0.123202</td>\n",
              "      <td>0.116923</td>\n",
              "      <td>0.718978</td>\n",
              "      <td>0.584615</td>\n",
              "      <td>0.210358</td>\n",
              "      <td>0.194872</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>2</td>\n",
              "      <td>Behaviour</td>\n",
              "      <td>0.706332</td>\n",
              "      <td>0.671182</td>\n",
              "      <td>0.805041</td>\n",
              "      <td>0.781775</td>\n",
              "      <td>0.687912</td>\n",
              "      <td>0.654618</td>\n",
              "      <td>0.741882</td>\n",
              "      <td>0.712568</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>2</td>\n",
              "      <td>Cleanliness</td>\n",
              "      <td>0.875726</td>\n",
              "      <td>0.873153</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>2</td>\n",
              "      <td>Pharmacy</td>\n",
              "      <td>0.944591</td>\n",
              "      <td>0.928571</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>2</td>\n",
              "      <td>Unprofessionalism</td>\n",
              "      <td>0.680475</td>\n",
              "      <td>0.668719</td>\n",
              "      <td>0.816848</td>\n",
              "      <td>0.825792</td>\n",
              "      <td>0.689022</td>\n",
              "      <td>0.666058</td>\n",
              "      <td>0.747510</td>\n",
              "      <td>0.737374</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>2</td>\n",
              "      <td>Inefficiency</td>\n",
              "      <td>0.795778</td>\n",
              "      <td>0.822660</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>2</td>\n",
              "      <td>Unavailibility</td>\n",
              "      <td>0.878628</td>\n",
              "      <td>0.881773</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>2</td>\n",
              "      <td>Billing</td>\n",
              "      <td>0.778628</td>\n",
              "      <td>0.751232</td>\n",
              "      <td>0.193900</td>\n",
              "      <td>0.171296</td>\n",
              "      <td>0.669173</td>\n",
              "      <td>0.627119</td>\n",
              "      <td>0.300676</td>\n",
              "      <td>0.269091</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Epoch              Label  Train Accuracy  Test Accuracy  Train precision  \\\n",
              "9      2            Service        0.900528       0.880542         1.000000   \n",
              "10     2         Negligence        0.607916       0.613300         0.123202   \n",
              "11     2          Behaviour        0.706332       0.671182         0.805041   \n",
              "12     2        Cleanliness        0.875726       0.873153         0.000000   \n",
              "13     2           Pharmacy        0.944591       0.928571         0.000000   \n",
              "14     2  Unprofessionalism        0.680475       0.668719         0.816848   \n",
              "15     2       Inefficiency        0.795778       0.822660         0.000000   \n",
              "16     2     Unavailibility        0.878628       0.881773         0.000000   \n",
              "17     2            Billing        0.778628       0.751232         0.193900   \n",
              "\n",
              "    Test precision  Train recall  Test recall  Train f1_score  Test f1_score  \n",
              "9         1.000000      0.934301     0.918719        0.966035       0.957638  \n",
              "10        0.116923      0.718978     0.584615        0.210358       0.194872  \n",
              "11        0.781775      0.687912     0.654618        0.741882       0.712568  \n",
              "12        0.000000      0.000000     0.000000        0.000000       0.000000  \n",
              "13        0.000000      0.000000     0.000000        0.000000       0.000000  \n",
              "14        0.825792      0.689022     0.666058        0.747510       0.737374  \n",
              "15        0.000000      0.000000     0.000000        0.000000       0.000000  \n",
              "16        0.000000      0.000000     0.000000        0.000000       0.000000  \n",
              "17        0.171296      0.669173     0.627119        0.300676       0.269091  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "Train Accuracy     0.796511\n",
              "Test Accuracy      0.787904\n",
              "Train precision    0.326555\n",
              "Test precision     0.321754\n",
              "Train recall       0.411043\n",
              "Test recall        0.383459\n",
              "Train f1_score     0.329607\n",
              "Test f1_score      0.319060\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 3/5\n",
            " [236/237 completed]  "
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/mnt/Data/sarmistha/Sarmistha/myenv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/mnt/Data/sarmistha/Sarmistha/myenv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Train Loss: 0.7595, Validation Loss: 0.7604\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/mnt/Data/sarmistha/Sarmistha/myenv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Epoch</th>\n",
              "      <th>Label</th>\n",
              "      <th>Train Accuracy</th>\n",
              "      <th>Test Accuracy</th>\n",
              "      <th>Train precision</th>\n",
              "      <th>Test precision</th>\n",
              "      <th>Train recall</th>\n",
              "      <th>Test recall</th>\n",
              "      <th>Train f1_score</th>\n",
              "      <th>Test f1_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>3</td>\n",
              "      <td>Service</td>\n",
              "      <td>0.912665</td>\n",
              "      <td>0.889163</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.934301</td>\n",
              "      <td>0.918719</td>\n",
              "      <td>0.966035</td>\n",
              "      <td>0.957638</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>3</td>\n",
              "      <td>Negligence</td>\n",
              "      <td>0.660686</td>\n",
              "      <td>0.636700</td>\n",
              "      <td>0.352720</td>\n",
              "      <td>0.283077</td>\n",
              "      <td>0.705000</td>\n",
              "      <td>0.609272</td>\n",
              "      <td>0.470196</td>\n",
              "      <td>0.386555</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>3</td>\n",
              "      <td>Behaviour</td>\n",
              "      <td>0.766227</td>\n",
              "      <td>0.701970</td>\n",
              "      <td>0.832819</td>\n",
              "      <td>0.784173</td>\n",
              "      <td>0.748497</td>\n",
              "      <td>0.688421</td>\n",
              "      <td>0.788410</td>\n",
              "      <td>0.733184</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>3</td>\n",
              "      <td>Cleanliness</td>\n",
              "      <td>0.875726</td>\n",
              "      <td>0.873153</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>3</td>\n",
              "      <td>Pharmacy</td>\n",
              "      <td>0.944591</td>\n",
              "      <td>0.928571</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>3</td>\n",
              "      <td>Unprofessionalism</td>\n",
              "      <td>0.729288</td>\n",
              "      <td>0.679803</td>\n",
              "      <td>0.892570</td>\n",
              "      <td>0.859729</td>\n",
              "      <td>0.713313</td>\n",
              "      <td>0.667838</td>\n",
              "      <td>0.792937</td>\n",
              "      <td>0.751731</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>3</td>\n",
              "      <td>Inefficiency</td>\n",
              "      <td>0.799208</td>\n",
              "      <td>0.827586</td>\n",
              "      <td>0.023256</td>\n",
              "      <td>0.027778</td>\n",
              "      <td>0.818182</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.045226</td>\n",
              "      <td>0.054054</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>3</td>\n",
              "      <td>Unavailibility</td>\n",
              "      <td>0.878628</td>\n",
              "      <td>0.881773</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>3</td>\n",
              "      <td>Billing</td>\n",
              "      <td>0.806069</td>\n",
              "      <td>0.778325</td>\n",
              "      <td>0.321351</td>\n",
              "      <td>0.291667</td>\n",
              "      <td>0.752551</td>\n",
              "      <td>0.715909</td>\n",
              "      <td>0.450382</td>\n",
              "      <td>0.414474</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Epoch              Label  Train Accuracy  Test Accuracy  Train precision  \\\n",
              "18     3            Service        0.912665       0.889163         1.000000   \n",
              "19     3         Negligence        0.660686       0.636700         0.352720   \n",
              "20     3          Behaviour        0.766227       0.701970         0.832819   \n",
              "21     3        Cleanliness        0.875726       0.873153         0.000000   \n",
              "22     3           Pharmacy        0.944591       0.928571         0.000000   \n",
              "23     3  Unprofessionalism        0.729288       0.679803         0.892570   \n",
              "24     3       Inefficiency        0.799208       0.827586         0.023256   \n",
              "25     3     Unavailibility        0.878628       0.881773         0.000000   \n",
              "26     3            Billing        0.806069       0.778325         0.321351   \n",
              "\n",
              "    Test precision  Train recall  Test recall  Train f1_score  Test f1_score  \n",
              "18        1.000000      0.934301     0.918719        0.966035       0.957638  \n",
              "19        0.283077      0.705000     0.609272        0.470196       0.386555  \n",
              "20        0.784173      0.748497     0.688421        0.788410       0.733184  \n",
              "21        0.000000      0.000000     0.000000        0.000000       0.000000  \n",
              "22        0.000000      0.000000     0.000000        0.000000       0.000000  \n",
              "23        0.859729      0.713313     0.667838        0.792937       0.751731  \n",
              "24        0.027778      0.818182     1.000000        0.045226       0.054054  \n",
              "25        0.000000      0.000000     0.000000        0.000000       0.000000  \n",
              "26        0.291667      0.752551     0.715909        0.450382       0.414474  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "Train Accuracy     0.819232\n",
              "Test Accuracy      0.799672\n",
              "Train precision    0.380302\n",
              "Test precision     0.360714\n",
              "Train recall       0.519094\n",
              "Test recall        0.511129\n",
              "Train f1_score     0.390354\n",
              "Test f1_score      0.366404\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 4/5\n",
            " [236/237 completed]  "
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/mnt/Data/sarmistha/Sarmistha/myenv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/mnt/Data/sarmistha/Sarmistha/myenv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Train Loss: 0.7426, Validation Loss: 0.7518\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/mnt/Data/sarmistha/Sarmistha/myenv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Epoch</th>\n",
              "      <th>Label</th>\n",
              "      <th>Train Accuracy</th>\n",
              "      <th>Test Accuracy</th>\n",
              "      <th>Train precision</th>\n",
              "      <th>Test precision</th>\n",
              "      <th>Train recall</th>\n",
              "      <th>Test recall</th>\n",
              "      <th>Train f1_score</th>\n",
              "      <th>Test f1_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>4</td>\n",
              "      <td>Service</td>\n",
              "      <td>0.915567</td>\n",
              "      <td>0.894089</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.934301</td>\n",
              "      <td>0.918719</td>\n",
              "      <td>0.966035</td>\n",
              "      <td>0.957638</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>4</td>\n",
              "      <td>Negligence</td>\n",
              "      <td>0.709763</td>\n",
              "      <td>0.634236</td>\n",
              "      <td>0.631645</td>\n",
              "      <td>0.547692</td>\n",
              "      <td>0.671096</td>\n",
              "      <td>0.547692</td>\n",
              "      <td>0.650773</td>\n",
              "      <td>0.547692</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>4</td>\n",
              "      <td>Behaviour</td>\n",
              "      <td>0.811873</td>\n",
              "      <td>0.714286</td>\n",
              "      <td>0.840535</td>\n",
              "      <td>0.748201</td>\n",
              "      <td>0.808911</td>\n",
              "      <td>0.718894</td>\n",
              "      <td>0.824420</td>\n",
              "      <td>0.733255</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>4</td>\n",
              "      <td>Cleanliness</td>\n",
              "      <td>0.875726</td>\n",
              "      <td>0.873153</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>4</td>\n",
              "      <td>Pharmacy</td>\n",
              "      <td>0.944591</td>\n",
              "      <td>0.928571</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>4</td>\n",
              "      <td>Unprofessionalism</td>\n",
              "      <td>0.788918</td>\n",
              "      <td>0.714286</td>\n",
              "      <td>0.789399</td>\n",
              "      <td>0.719457</td>\n",
              "      <td>0.839456</td>\n",
              "      <td>0.760766</td>\n",
              "      <td>0.813659</td>\n",
              "      <td>0.739535</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>4</td>\n",
              "      <td>Inefficiency</td>\n",
              "      <td>0.807916</td>\n",
              "      <td>0.833744</td>\n",
              "      <td>0.107235</td>\n",
              "      <td>0.097222</td>\n",
              "      <td>0.721739</td>\n",
              "      <td>0.736842</td>\n",
              "      <td>0.186727</td>\n",
              "      <td>0.171779</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>4</td>\n",
              "      <td>Unavailibility</td>\n",
              "      <td>0.878628</td>\n",
              "      <td>0.881773</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>4</td>\n",
              "      <td>Billing</td>\n",
              "      <td>0.831135</td>\n",
              "      <td>0.818966</td>\n",
              "      <td>0.503268</td>\n",
              "      <td>0.481481</td>\n",
              "      <td>0.732171</td>\n",
              "      <td>0.759124</td>\n",
              "      <td>0.596514</td>\n",
              "      <td>0.589235</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Epoch              Label  Train Accuracy  Test Accuracy  Train precision  \\\n",
              "27     4            Service        0.915567       0.894089         1.000000   \n",
              "28     4         Negligence        0.709763       0.634236         0.631645   \n",
              "29     4          Behaviour        0.811873       0.714286         0.840535   \n",
              "30     4        Cleanliness        0.875726       0.873153         0.000000   \n",
              "31     4           Pharmacy        0.944591       0.928571         0.000000   \n",
              "32     4  Unprofessionalism        0.788918       0.714286         0.789399   \n",
              "33     4       Inefficiency        0.807916       0.833744         0.107235   \n",
              "34     4     Unavailibility        0.878628       0.881773         0.000000   \n",
              "35     4            Billing        0.831135       0.818966         0.503268   \n",
              "\n",
              "    Test precision  Train recall  Test recall  Train f1_score  Test f1_score  \n",
              "27        1.000000      0.934301     0.918719        0.966035       0.957638  \n",
              "28        0.547692      0.671096     0.547692        0.650773       0.547692  \n",
              "29        0.748201      0.808911     0.718894        0.824420       0.733255  \n",
              "30        0.000000      0.000000     0.000000        0.000000       0.000000  \n",
              "31        0.000000      0.000000     0.000000        0.000000       0.000000  \n",
              "32        0.719457      0.839456     0.760766        0.813659       0.739535  \n",
              "33        0.097222      0.721739     0.736842        0.186727       0.171779  \n",
              "34        0.000000      0.000000     0.000000        0.000000       0.000000  \n",
              "35        0.481481      0.732171     0.759124        0.596514       0.589235  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "Train Accuracy     0.840457\n",
              "Test Accuracy      0.810345\n",
              "Train precision    0.430231\n",
              "Test precision     0.399339\n",
              "Train recall       0.523075\n",
              "Test recall        0.493560\n",
              "Train f1_score     0.448681\n",
              "Test f1_score      0.415459\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 5/5\n",
            " [236/237 completed]  "
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/mnt/Data/sarmistha/Sarmistha/myenv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/mnt/Data/sarmistha/Sarmistha/myenv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Train Loss: 0.7280, Validation Loss: 0.7468\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/mnt/Data/sarmistha/Sarmistha/myenv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Epoch</th>\n",
              "      <th>Label</th>\n",
              "      <th>Train Accuracy</th>\n",
              "      <th>Test Accuracy</th>\n",
              "      <th>Train precision</th>\n",
              "      <th>Test precision</th>\n",
              "      <th>Train recall</th>\n",
              "      <th>Test recall</th>\n",
              "      <th>Train f1_score</th>\n",
              "      <th>Test f1_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>5</td>\n",
              "      <td>Service</td>\n",
              "      <td>0.909235</td>\n",
              "      <td>0.886700</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.934301</td>\n",
              "      <td>0.918719</td>\n",
              "      <td>0.966035</td>\n",
              "      <td>0.957638</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>5</td>\n",
              "      <td>Negligence</td>\n",
              "      <td>0.756201</td>\n",
              "      <td>0.681034</td>\n",
              "      <td>0.551595</td>\n",
              "      <td>0.418462</td>\n",
              "      <td>0.821229</td>\n",
              "      <td>0.663415</td>\n",
              "      <td>0.659933</td>\n",
              "      <td>0.513208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>5</td>\n",
              "      <td>Behaviour</td>\n",
              "      <td>0.827968</td>\n",
              "      <td>0.709360</td>\n",
              "      <td>0.889403</td>\n",
              "      <td>0.779376</td>\n",
              "      <td>0.806061</td>\n",
              "      <td>0.698925</td>\n",
              "      <td>0.845684</td>\n",
              "      <td>0.736961</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>5</td>\n",
              "      <td>Cleanliness</td>\n",
              "      <td>0.875726</td>\n",
              "      <td>0.873153</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>5</td>\n",
              "      <td>Pharmacy</td>\n",
              "      <td>0.944591</td>\n",
              "      <td>0.928571</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>5</td>\n",
              "      <td>Unprofessionalism</td>\n",
              "      <td>0.825858</td>\n",
              "      <td>0.720443</td>\n",
              "      <td>0.896829</td>\n",
              "      <td>0.814480</td>\n",
              "      <td>0.828596</td>\n",
              "      <td>0.728745</td>\n",
              "      <td>0.861364</td>\n",
              "      <td>0.769231</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>5</td>\n",
              "      <td>Inefficiency</td>\n",
              "      <td>0.812137</td>\n",
              "      <td>0.838670</td>\n",
              "      <td>0.121447</td>\n",
              "      <td>0.104167</td>\n",
              "      <td>0.758065</td>\n",
              "      <td>0.882353</td>\n",
              "      <td>0.209354</td>\n",
              "      <td>0.186335</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>5</td>\n",
              "      <td>Unavailibility</td>\n",
              "      <td>0.878628</td>\n",
              "      <td>0.881773</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>5</td>\n",
              "      <td>Billing</td>\n",
              "      <td>0.844063</td>\n",
              "      <td>0.806650</td>\n",
              "      <td>0.440087</td>\n",
              "      <td>0.351852</td>\n",
              "      <td>0.861407</td>\n",
              "      <td>0.817204</td>\n",
              "      <td>0.582552</td>\n",
              "      <td>0.491909</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Epoch              Label  Train Accuracy  Test Accuracy  Train precision  \\\n",
              "36     5            Service        0.909235       0.886700         1.000000   \n",
              "37     5         Negligence        0.756201       0.681034         0.551595   \n",
              "38     5          Behaviour        0.827968       0.709360         0.889403   \n",
              "39     5        Cleanliness        0.875726       0.873153         0.000000   \n",
              "40     5           Pharmacy        0.944591       0.928571         0.000000   \n",
              "41     5  Unprofessionalism        0.825858       0.720443         0.896829   \n",
              "42     5       Inefficiency        0.812137       0.838670         0.121447   \n",
              "43     5     Unavailibility        0.878628       0.881773         0.000000   \n",
              "44     5            Billing        0.844063       0.806650         0.440087   \n",
              "\n",
              "    Test precision  Train recall  Test recall  Train f1_score  Test f1_score  \n",
              "36        1.000000      0.934301     0.918719        0.966035       0.957638  \n",
              "37        0.418462      0.821229     0.663415        0.659933       0.513208  \n",
              "38        0.779376      0.806061     0.698925        0.845684       0.736961  \n",
              "39        0.000000      0.000000     0.000000        0.000000       0.000000  \n",
              "40        0.000000      0.000000     0.000000        0.000000       0.000000  \n",
              "41        0.814480      0.828596     0.728745        0.861364       0.769231  \n",
              "42        0.104167      0.758065     0.882353        0.209354       0.186335  \n",
              "43        0.000000      0.000000     0.000000        0.000000       0.000000  \n",
              "44        0.351852      0.861407     0.817204        0.582552       0.491909  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "Train Accuracy     0.852712\n",
              "Test Accuracy      0.814039\n",
              "Train precision    0.433262\n",
              "Test precision     0.385371\n",
              "Train recall       0.556629\n",
              "Test recall        0.523262\n",
              "Train f1_score     0.458325\n",
              "Test f1_score      0.406143\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "columns = ['Epoch', 'Label', 'Train Accuracy', 'Test Accuracy', 'Train precision','Test precision','Train recall','Test recall','Train f1_score','Test f1_score']\n",
        "results_df = pd.DataFrame(columns=columns)\n",
        "# Modify your training and validation loops to append results to the DataFrame\n",
        "for epoch in range(1, EPOCHS+1):\n",
        "    print(f'Epoch {epoch}/{EPOCHS}')\n",
        "    _, _, train_loss = train_model(train_data_loader, model, optimizer)\n",
        "    train_precision, train_recall, train_f1_score, train_accuracies, _, _ = eval_model(train_data_loader, model, loss_fn, device, target_list)\n",
        "    val_precision, val_recall, val_f1_score, val_accuracies, val_loss, labels = eval_model(val_data_loader, model, loss_fn, device, target_list)\n",
        "    test_precision, test_recall, test_f1_score, test_accuracies, _, _= eval_model(test_data_loader, model, loss_fn, device, target_list)\n",
        "\n",
        "    epoch_results = pd.DataFrame({\n",
        "        'Epoch': epoch,\n",
        "        'Label': labels,\n",
        "        'Train Accuracy': train_accuracies,\n",
        "        'Test Accuracy': test_accuracies,\n",
        "        'Train precision': train_precision,\n",
        "        'Test precision': test_precision,\n",
        "        'Train recall': train_recall,\n",
        "        'Test recall': test_recall,\n",
        "        'Train f1_score': train_f1_score,\n",
        "        'Test f1_score': test_f1_score,\n",
        "\n",
        "    })\n",
        "\n",
        "    results_df = pd.concat([results_df, epoch_results], ignore_index=True)\n",
        "\n",
        "    # Optionally print the results for each epoch\n",
        "    print(f'Train Loss: {train_loss:.4f}, Validation Loss: {val_loss:.4f}')\n",
        "    display(results_df[results_df['Epoch'] == epoch])  # Display only the current epoch results in tabular form\n",
        "    display(results_df[results_df['Epoch'] == epoch][['Train Accuracy','Test Accuracy','Train precision','Test precision','Train recall','Test recall','Train f1_score','Test f1_score']].mean(axis=0))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "id": "aAOPcmD0kA4c"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/tmp/ipykernel_20362/117140271.py:1: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  test_text = df.iloc[0][0]\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "'Very poor hospital no care kabhi mat jana if u have 6 hours free time then u can go this hospital only for number he give u 6 hours and u must be setting other wise not give number minimum 6 hours'"
            ]
          },
          "execution_count": 45,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "test_text = df.iloc[0][0]\n",
        "test_text"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 53,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "tensor([[[0.0029, 0.0015, 0.9956],\n",
            "         [0.4942, 0.0098, 0.4960],\n",
            "         [0.0058, 0.0030, 0.9912],\n",
            "         [0.9858, 0.0067, 0.0074],\n",
            "         [0.9928, 0.0034, 0.0038],\n",
            "         [0.0996, 0.0054, 0.8950],\n",
            "         [0.9893, 0.0045, 0.0062],\n",
            "         [0.9906, 0.0048, 0.0046],\n",
            "         [0.9963, 0.0013, 0.0025]]], device='cuda:0')\n",
            "[('Service', 'Non Complaint'), ('Negligence', 'Non Complaint'), ('Behaviour', 'Non Complaint'), ('Cleanliness', 'Unknown'), ('Pharmacy', 'Unknown'), ('Unprofessionalism', 'Non Complaint'), ('Inefficiency', 'Unknown'), ('Unavailibility', 'Unknown'), ('Billing', 'Unknown')]\n"
          ]
        }
      ],
      "source": [
        "def predict_aspect(review, model, tokenizer, max_len, device):\n",
        "    model.eval()  # Ensure the model is in evaluation mode\n",
        "\n",
        "    # Tokenize the input review\n",
        "    inputs = tokenizer.encode_plus(\n",
        "        review,\n",
        "        None,\n",
        "        add_special_tokens=True,\n",
        "        max_length=max_len,\n",
        "        padding='max_length',\n",
        "        return_token_type_ids=True,\n",
        "        truncation=True,\n",
        "        return_attention_mask=True,\n",
        "        return_tensors='pt'\n",
        "    )\n",
        "\n",
        "    # Move tensors to the appropriate device\n",
        "    ids = inputs['input_ids'].to(device)\n",
        "    mask = inputs['attention_mask'].to(device)\n",
        "    token_type_ids = inputs['token_type_ids'].to(device)\n",
        "\n",
        "    with torch.no_grad():  # Ensure no gradients are calculated\n",
        "        outputs = model(ids, mask, token_type_ids)\n",
        "        print(outputs)\n",
        "        predictions = torch.argmax(outputs, dim=-1)  # Get the index of max logit\n",
        "        predictions = predictions.cpu().numpy()[0]  # Move to cpu and convert to numpy\n",
        "    # Map numeric predictions back to labels\n",
        "    aspect_classes = ['Unknown', 'Complaint', 'Non Complaint']\n",
        "    predicted_aspects = []\n",
        "    for i, aspect in enumerate(target_list):  # Skip the first column if it's not an aspect\n",
        "        predicted_aspects.append((aspect, aspect_classes[predictions[i]]))\n",
        "\n",
        "    return predicted_aspects\n",
        "\n",
        "# Example usage:\n",
        "review_text = \"Doctors are very friendly towards the patients.All the staffs cordinate very well.Hospital was clean and tidy.And all of them was so helpful in our need.\"\n",
        "predicted_aspects = predict_aspect(review_text, model, tokenizer, MAX_LEN, device)\n",
        "print(predicted_aspects)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "T4",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.10"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
